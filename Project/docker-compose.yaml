version: '3'

services:

  broker-service:
    container_name: broker-service
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8080:80"
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - postgres
      - logger
      - rabbitmq-network
    depends_on:
      - rabbitmq
  
  mail-service:
    container_name: mail-service
    build:
      context: ./../mail-service
      dockerfile: ./../mail-service/mail-service.dockerfile
    restart: always
    ports:
      - "8083:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MAIL_PORT: 1025
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      ENCRYPTION: none
      FROM_ADDRESS: dumindudtk@example.com 
      FROM_NAME: "Dumindu DTK"
    networks:
      - logger
      - mail

  mailhog:
    container_name: mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - mail

  authentication-service:
    container_name: authentication-service
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    networks:
      - postgres
      - rabbitmq-network
    depends_on:
      - rabbitmq

  postgres:
    container_name: postgres
    image: 'postgres:14.0'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/
    networks:
      - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - postgres
    restart: unless-stopped

  mongo:
    container_name: mongodb
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db
    networks:
      - mongo
      - mongo-express-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - 8082:8081
    restart: always
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
      - mongo-express-network

  logger-service:
    container_name: logger-service
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    ports:
      - "8089:80"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    networks:
      - mongo
      - logger
      
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.10.10-management-alpine
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - ./db-data/rabbit-mq/data/:/var/lib/rabbitmq
      - ./db-data/rabbit-mq/log/:/var/log/rabbitmq
      - ./db-data/rabbit-mq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - rabbitmq-network

networks:
  postgres:
    driver: bridge
  mongo:
    driver: bridge
  logger:
    driver: bridge
  mongo-express-network:
    driver: bridge
  mail:
    driver: bridge
  rabbitmq-network:
    driver: bridge

volumes:
  pgadmin:
  postgres: